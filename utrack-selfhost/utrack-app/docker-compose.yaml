x-app-env: &app-env
  environment:
    - NGINX_PORT=${NGINX_PORT:-80}
    - WEB_URL=${WEB_URL:-http://localhost}
    - DEBUG=${DEBUG:-0}
    - SENTRY_DSN=${SENTRY_DSN:-""}
    - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-"production"}
    - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-}
    # Gunicorn Workers
    - GUNICORN_WORKERS=${GUNICORN_WORKERS:-1}
    #DB SETTINGS
    - PGHOST=${PGHOST:-utrack-db}
    - PGDATABASE=${PGDATABASE:-utrack}
    - POSTGRES_USER=${POSTGRES_USER:-utrack}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-utrack}
    - POSTGRES_DB=${POSTGRES_DB:-utrack}
    - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    - PGDATA=${PGDATA:-/var/lib/postgresql/data}
    - DATABASE_URL=${DATABASE_URL:-postgresql://utrack:utrack@utrack-db/utrack}
    # REDIS SETTINGS
    - REDIS_HOST=${REDIS_HOST:-utrack-redis}
    - REDIS_PORT=${REDIS_PORT:-6379}
    - REDIS_URL=${REDIS_URL:-redis://utrack-redis:6379/}

    # RabbitMQ Settings
    - RABBITMQ_HOST=${RABBITMQ_HOST:-utrack-mq}
    - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
    - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-utrack}
    - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-utrack}
    - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-utrack}
    - RABBITMQ_VHOST=${RABBITMQ_VHOST:-utrack}
    - AMQP_URL=${AMQP_URL:-amqp://utrack:utrack@utrack-mq:5672/utrack}
    # Application secret
    - SECRET_KEY=${SECRET_KEY:-60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5}
    # DATA STORE SETTINGS
    - USE_MINIO=${USE_MINIO:-1}
    - AWS_REGION=${AWS_REGION:-}
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-"access-key"}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-"secret-key"}
    - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL:-http://utrack-minio:9000}
    - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-uploads}
    - MINIO_ROOT_USER=${MINIO_ROOT_USER:-"access-key"}
    - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-"secret-key"}
    - BUCKET_NAME=${BUCKET_NAME:-uploads}
    - FILE_SIZE_LIMIT=${FILE_SIZE_LIMIT:-5242880}
    # Live server env
    - API_BASE_URL=${API_BASE_URL:-http://api:8000}

services:
  web:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-frontend:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: node web/server.js web
    deploy:
      replicas: ${WEB_REPLICAS:-1}
    depends_on:
      - api
      - worker

  space:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-space:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: node space/server.js space
    deploy:
      replicas: ${SPACE_REPLICAS:-1}
    depends_on:
      - api
      - worker
      - web

  admin:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-admin:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: node admin/server.js admin
    deploy:
      replicas: ${ADMIN_REPLICAS:-1}
    depends_on:
      - api
      - web

  live:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-live:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: node live/dist/server.js live
    deploy:
      replicas: ${LIVE_REPLICAS:-1}
    depends_on:
      - api
      - web

  api:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-backend:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: ./bin/docker-entrypoint-api.sh
    deploy:
      replicas: ${API_REPLICAS:-1}
    volumes:
      - logs_api:/code/utrack/logs
    depends_on:
      - utrack-db
      - utrack-redis
      - utrack-mq


  worker:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-backend:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: ./bin/docker-entrypoint-worker.sh
    volumes:
      - logs_worker:/code/utrack/logs
    depends_on:
      - api
      - utrack-db
      - utrack-redis
      - utrack-mq

  beat-worker:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-backend:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    command: ./bin/docker-entrypoint-beat.sh
    volumes:
      - logs_beat-worker:/code/utrack/logs
    depends_on:
      - api
      - utrack-db
      - utrack-redis
      - utrack-mq

  migrator:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-backend:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: "no"
    command: ./bin/docker-entrypoint-migrator.sh
    volumes:
      - logs_migrator:/code/utrack/logs
    depends_on:
      - utrack-db
      - utrack-redis

  utrack-db:
    <<: *app-env
    image: postgres:15.7-alpine
    pull_policy: if_not_present
    restart: unless-stopped
    command: postgres -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data

  utrack-redis:
    <<: *app-env
    image: valkey/valkey:7.2.5-alpine
    pull_policy: if_not_present
    restart: unless-stopped
    volumes:
      - redisdata:/data

  utrack-mq:
    <<: *app-env
    image: rabbitmq:3.13.6-management-alpine
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  utrack-minio:
    <<: *app-env
    image: minio/minio:latest
    pull_policy: if_not_present
    restart: unless-stopped
    command: server /export --console-address ":9090"
    volumes:
      - uploads:/export

  # Comment this if you already have a reverse proxy running
  proxy:
    <<: *app-env
    image: ${DOCKERHUB_USER:-getutrack}/utrack-proxy:${APP_RELEASE:-stable}
    platform: ${DOCKER_PLATFORM:-}
    pull_policy: if_not_present
    restart: unless-stopped
    ports:
      - ${NGINX_PORT}:80
    depends_on:
      - web
      - api
      - space

  # Neo4j graph database for analytics
  utrack-neo4j:
    image: neo4j:5.17.0-community
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-utrackneo4j}
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,algo.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,algo.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_advertised__address=utrack-neo4j:7687
      - NEO4J_dbms_connector_http_advertised__address=utrack-neo4j:7474
      # Added parameters for better performance
      - NEO4J_dbms_jvm_additional=-XX:+UseG1GC
      - NEO4J_dbms_transaction_timeout=5m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"  # HTTP for Neo4j Browser
      - "7687:7687"  # Bolt protocol
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3G
        reservations:
          memory: 1G

  # Qdrant vector database for embeddings
  utrack-qdrant:
    image: qdrant/qdrant:v1.8.2
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__STORAGE__OPTIMIZERS__INDEXING_THRESHOLD=10000
      - QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD=10000
      - QDRANT__STORAGE__OPTIMIZERS__VACUUM_MIN_VECTOR_NUMBER=1000
      - QDRANT__STORAGE__OPTIMIZERS__DEFAULT_SEGMENT_NUMBER=2
      - QDRANT__STORAGE__OPTIMIZERS__MAX_SEGMENT_SIZE=10000
      # Added performance parameters
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=0
      - QDRANT__STORAGE__PERFORMANCE__RESET_QUERY_RUNTIME_STATS=false
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 512M

  # Risk analyzer service with RAG implementation
  risk-analyzer:
    <<: *app-env
    build:
      context: ./risk-analyzer
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Inherit common environment variables
      - PGHOST=${PGHOST:-utrack-db}
      - PGDATABASE=${PGDATABASE:-utrack}
      - POSTGRES_USER=${POSTGRES_USER:-utrack}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-utrack}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      # RabbitMQ settings
      - RABBITMQ_HOST=${RABBITMQ_HOST:-utrack-mq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-utrack}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-utrack}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-utrack}
      # Redis settings
      - REDIS_HOST=${REDIS_HOST:-utrack-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      # Neo4j settings
      - NEO4J_URI=bolt://utrack-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-utrackneo4j}
      # Qdrant settings
      - QDRANT_HOST=utrack-qdrant
      - QDRANT_PORT=6333
      # Minio settings
      - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL:-http://utrack-minio:9000}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-"access-key"}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-"secret-key"}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-uploads}
      # App settings
      - LOG_LEVEL=${RISK_ANALYZER_LOG_LEVEL:-INFO}
      - WORKERS=${RISK_ANALYZER_WORKERS:-2}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - EMBEDDING_DIMENSION=${EMBEDDING_DIMENSION:-384}
    volumes:
      - ./risk-analyzer:/app
      - risk_analyzer_data:/data
    ports:
      - "8100:8000"  # API port
    depends_on:
      - utrack-neo4j
      - utrack-qdrant
      - utrack-db
      - utrack-redis
      - utrack-mq
      - utrack-minio
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers ${RISK_ANALYZER_WORKERS:-2}

volumes:
  pgdata:
  redisdata:
  
  uploads:
  logs_api:
  logs_worker:
  logs_beat-worker:
  logs_migrator:
  rabbitmq_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  qdrant_data:
  risk_analyzer_data:
